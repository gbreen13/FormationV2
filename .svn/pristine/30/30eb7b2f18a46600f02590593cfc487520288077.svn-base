//
//  PdfButtonField.m
//  Formation
//
//  Created by George Breen on 2/3/11.
//  Copyright 2011 Rabbit Hill Solutions, Inc. All rights reserved.
//

#import "PdfButtonField.h"
#import "PdfDictionary.h"
#import "PdfArray.h"
#import "PdfName.h"
#import "PdfReader.h"

@implementation PdfButtonField
@synthesize onState, typeOfButton, kidsRefArray,kidsDictArray, button, radioselected, reader;

static PdfName *offState = nil;

-(id) initWithObjno:(int)objNo andGeneration:(int)genNo andDictionary:(PdfDictionary *)fd andReader:(PdfReader *)r
{
	if((self = [super initWithObjno:objNo andGeneration:genNo andDictionary:fd])== nil)

		return nil;
	reader = r;
	if(offState == nil) 
		offState = [[PdfName alloc] initWithName:@"/Off"];

//	[fieldDictionary removeObjectForKey:APName];	// remove apperance element so it gets regenerated by the viewer

	if([self getBitPosition:16])
		typeOfButton = kPushButton;
	else if ([PdfButtonField checkForRadioButton:fieldDictionary]) {
		typeOfButton = kRadioButton;
		NSLog(@"r btn:%@", [self toString]);
		kidsRefArray = [fd objectForKey:KidsName];
		kidsDictArray = [[NSMutableArray alloc]init];
		kidsButtons = [[NSMutableArray alloc]init];
		for( PdfReference *child in kidsRefArray) {
			PdfDictionary *kiddic = [reader GetPdfObjectFromReference: child];
			[kidsDictArray addObject:kiddic];
		}
	}
	else {
		typeOfButton = kCheckButton;
		[self setOnState];
	}
	
	return self;
}

+(BOOL)checkForRadioButton:(PdfDictionary *)d
{
	PdfName *fieldType = (PdfName *)[d objectForKey:FTName];
	if (!([fieldType isEqualToString:ButtonName]))
		return FALSE;
//
//	If it is a button with kids, its likely a radio button.  Check the first kid's flags though.
//
	PdfNumber *f;
	PdfArray *kids;
	
	if(kids = (PdfArray *)[d objectForKey:@"/Kids"]) {
		PdfReference *kid1 = [kids objectAtIndex:0];
		PdfDictionary *kidd = (PdfDictionary *)[sharedPdfReader GetPdfObjectFromReference:kid1];
		f = [kidd objectForKey:FFName];
	}
	else {
		f = [d objectForKey:FFName];		// no kid.  check himself.
	}

	if(!f) return FALSE;
	int fn = [f intValue];
	if (fn & (1<<16)) return FALSE;	// push button
	if(!(fn & (1<<15))) return FALSE;
	return TRUE;
}

-(BOOL) isRadioButton
{
	return typeOfButton == kRadioButton;
}
-(BOOL) isButton
{
	PdfName *t = [fieldDictionary objectForKey:FTName];
	if(t) {
		return ([t isEqualToString:ButtonName]);
	}
	return FALSE;
}
//
//	Set and get the radio button.
//
-(void) setRadioButton:(NSString *)bName
{
	if(![self isRadioButton]) return ;
	
	PdfName *selButton = [[[PdfName alloc] initWithName:[NSString stringWithFormat:@"%@",bName]]autorelease];
	[fieldDictionary setObject:selButton forKey:VName];
}
-(NSString *) getRadioButton
{
	if(![self isRadioButton]) return nil;
	return [(PdfName *)[fieldDictionary objectForKey:VName] toString];
}
-(BOOL) getNoToggleOff
{
	return [self getBitPosition:15];
}
-(void) setNoToggleOff
{
	if(![self isRadioButton]) return ;
	[self setBitPosition:15];
}
//
//	in the /AP dictionary is the /N dictionary.  There are two entries here: the offstate
//	with the key /Off and the on state that is the other on (usually /On but not necessarilly so)
//	This code finds out the name  of the on state and stores it.
//
-(void) setOnState
{
	if(typeOfButton != kCheckButton) return;
	
	PdfDictionary *apDict;
	
	apDict = [fieldDictionary objectDeepForKey:APName withReader:reader];
	if(apDict && [apDict isKindOfClass:[PdfDictionary class]]) {
		PdfDictionary *subAppearance = [apDict objectDeepForKey:NName withReader:reader];
		for (id theKey in subAppearance) {
			if (![theKey isEqualToString:@"/Off"]) {
				onState = [[PdfName alloc]initWithName:theKey];
				break;
			}
		}
	}
}
	
-(BOOL) isChecked
{
	PdfName *os = [fieldDictionary objectForKey:VName];
	return (os && [os isKindOfClass:[PdfName class]] && [os isEqualTo:onState]);
}

-(void) setChecked: (BOOL)onOff
{
	PdfName *name = (onOff)? onState: offState;
	
	[fieldDictionary setObject:name forKey:VName];
	[fieldDictionary setObject:name forKey:ASName];
}

-(void) setButtonImage:(UIButton *)b
{
	switch (typeOfButton) {
		case kRadioButton:
			[b setImage: [UIImage imageNamed:@"bluebuttonoff"] forState: UIControlStateNormal];
			[b setImage: [UIImage imageNamed:@"bluebuttonOn"] forState: UIControlStateSelected];
			break;
		case kPushButton:
		case kCheckButton:
			[b setImage: [UIImage imageNamed:@"checkboxoff"] forState: UIControlStateNormal];
			[b setImage: [UIImage imageNamed:@"checkboxon"] forState: UIControlStateSelected];
			break;
	}
	
}

-(void) checkPressedDown
{
	if(typeOfButton == kPushButton) return;
	[self setChecked:(button.selected = !button.selected)];
}
		
-(void) radioPressedDown: (id)sender
{
	UIButton *rb = (UIButton *)sender;
	int index = rb.tag;
	if(rb.selected) return;		// already pushed
	rb.selected = YES;
	[self setButtonImage:rb];
	if(radioselected != -1) {
		UIButton *lastB = [kidsButtons objectAtIndex:radioselected];
		lastB.selected = NO;
		[self setButtonImage:lastB];
	}
	
	radioselected = index;
//
//	Now get the key representing /On for this radio button and set the value.
//
#if 1
	PdfDictionary *buttonDict = [kidsDictArray objectAtIndex:index];
#else
    PdfDictionary *buttonDict = fieldDictionary;
#endif
 
	if(buttonDict) {
		PdfObject *apDict = [buttonDict objectForKeyWithIndirect:APName];
		if(apDict) {
			PdfDictionary *subAppearance = [apDict objectForKeyWithIndirect:NName];
			for (id theKey in subAppearance) {
				if (![theKey isEqualToString:@"/Off"]) {
					[self setRadioButton:(NSString *)theKey];
					break;
				}
			}
		}
	}
}

-(void) addToView:(UIView *)view withPageRect: (CGRect) pageRect
{
	CGRect r, rect;
	PdfArray *rectArray;
	
	switch (typeOfButton) {
		case kRadioButton:
			NSLog(@"r btn:%@", [self toString]);
			radioselected = -1;
#if 1
			for(PdfDictionary *kidDict in kidsDictArray) {
#else
                PdfDictionary * kidDict = fieldDictionary;
#endif
				rectArray = [kidDict objectForKey:@"/Rect"];
				if(rectArray) {
					r = [PdfReader getPdfRect:rectArray];
					if (r.size.height > r.size.width)
						r.size.height = r.size.width;
					else
						r.size.width = r.size.height;
						
					CGAffineTransform trans = CGAffineTransformIdentity;
					
					trans = CGAffineTransformTranslate(trans, 0, pageRect.size.height);
					trans = CGAffineTransformScale(trans, 1.0, -1.0);
					
					rect = CGRectApplyAffineTransform(r, trans);
					UIButton *b = [UIButton buttonWithType:UIButtonTypeCustom];
					b.frame = rect;
					[b addTarget:self action:@selector(radioPressedDown:) forControlEvents:UIControlEventTouchDown];
					[self setButtonImage:b];
					b.tag = [kidsButtons count];		// tag this button so we know which is selected.
					[kidsButtons addObject:b];
					[view addSubview:b];
#if 1
				}
#endif
			}
			break;

		case kCheckButton:
		case kPushButton:
			
			rectArray = [fieldDictionary objectForKey:@"/Rect"];
			if(rectArray){
				r = where;
				CGAffineTransform trans = CGAffineTransformIdentity;
	
				trans = CGAffineTransformTranslate(trans, 0, pageRect.size.height);
				trans = CGAffineTransformScale(trans, 1.0, -1.0);
	
				CGRect rect = CGRectApplyAffineTransform(r, trans);

				button = [UIButton buttonWithType:UIButtonTypeCustom];
				[self setButtonImage:button];
				button.frame = rect;
				[button addTarget:self action:@selector(checkPressedDown) forControlEvents:UIControlEventTouchDown];
				if([self isChecked]) button.selected = TRUE;
				[view addSubview:button];
			}
			break;
			
	}
}


-(void) dealloc
{
	if(kidsButtons) 
		[kidsButtons release];
	[onState release];
	[kidsRefArray release];
	[kidsDictArray release];
	[super dealloc];
}

@end
