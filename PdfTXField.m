//
//  PdfTXField.m
//  Formation
//
//  Created by George Breen on 1/30/11.
//  Copyright 2011 Rabbit Hill Solutions, Inc. All rights reserved.
//

#import "PdfTXField.h"
#import "PdfObject.h"
#import "PdfString.h"
#import "PdfDictionary.h"
#import "PdfReader.h"
//
//	This is a text field form field object.
//	The same object can be used for singleline or  multline objects.
//	We use either a TextField object for single line or a TextView object for multi line.
//	multi-line is determined by comparing the fontheight to the rectangel height.
//
@implementation BCZeroEdgeTextView

- (UIEdgeInsets) contentInset { return UIEdgeInsetsZero; }

@end
#define FONT_REGEX @"^/(\\S+)\\s+(\\d+)"
#define TEXT_COLOR 0.0, 0.0,0.0, 1
#define TEXT_BACKGROUND 1.0, 0.8, 0.0, 0.1
@implementation PdfTXField
@synthesize textField, textView, textFont;

-(id) initWithObjno:(int)objNo andGeneration:(int)genNo andDictionary:(PdfDictionary *)fd
{
	if(!(self = [super initWithObjno:objNo andGeneration:genNo andDictionary:fd])) return nil;
//		[fieldDictionary removeObjectForKey:APName];	// remove apperance element so it gets regenerated by the viewer
//
//	Parse out the font info from the /DA string.
//	looks like: /Fontname height Tf other stuff..
	
	
	textFont = [sharedPdfReader getPdfFont:fieldDictionary];
	if(textFont == nil) 
		textFont = 	[UIFont fontWithName:@"Helvetica" size:11.0];

	return self;
}
-(NSString *)getText
{
	id rets = (PdfString *)[fieldDictionary objectForKey:VName];
	
	if(rets) 
		if([rets isKindOfClass:[PdfString class]]) 
			return ([(PdfString *)rets text]);
			
	return nil;
}
-(void) setText:(NSString *)value
{
	cstring *ip = [[[cstring alloc] initWithString:value]autorelease];
	PdfString *vs = [[[PdfString alloc]initWithCP:ip andIsHex:FALSE] autorelease];
	[fieldDictionary setObject:vs forKey:VName];
}
-(BOOL) isMultiLineBit
{
	return [self getBitPosition:13];
}
-(void) setMultiLineBit
{
	[self setBitPosition:13];
}
-(BOOL) isPasswordBit
{
	return [self getBitPosition:14];
}
-(void) setPasswordBit
{
	[self setBitPosition:14];
}
-(BOOL) isFileSelectBit
{
	return [self getBitPosition:21];
}
-(void) setFileSelectBit
{
	[self setBitPosition:21];
}
-(BOOL) isDoNotScrollBit
{
	return [self getBitPosition:24];
}
-(void) setDoNotScrollBit
{
	[self setBitPosition: 24];
}
-(BOOL) isDoNotSpellCheckBit
{
	return [self getBitPosition:23];
}
-(void) setDoNotSpellCheckBit
{
	[self setBitPosition:23];
}

-(void) reScale: (float)scale
{
	return;
#if 0
	float height;
	
//	lastheight *= scale;
	if ( scale < lastscale) {
		
		lastscale *= scale;
	}
	else if ( scale > lastscale) {
		
		lastscale /= scale;
	}
	else if ( lastscale == 1.0 ) {
		
		lastscale=1.0;
	}
	
	float h = fontHeight * scale;
	
	lastscale = lastscale;
	
	textField.font = [UIFont fontWithName:fontFamily size:h];
	[textField setNeedsDisplay];
#endif

}

- (IBAction)textFieldDidEndEditing:(id)sender {
	[self setText:textField.text];
	[sender resignFirstResponder];
}

- (IBAction)textViewDidEndEditing:(id)sender {
	[self setText:textView.text];
	[sender resignFirstResponder];
}

-(void) addToView:(UIView *)view withPageRect: (CGRect) pageRect
{
	CGRect r = where;
		
	CGAffineTransform trans = CGAffineTransformIdentity;
		
	trans = CGAffineTransformTranslate(trans, 0, pageRect.size.height);
	trans = CGAffineTransformScale(trans, 1.0, -1.0);
		
	CGRect rect = CGRectApplyAffineTransform(r, trans);

	if((textFont.pointSize * 3) < where.size.height) {
		
		textView = [[UITextView alloc] initWithFrame:rect];
		textView.returnKeyType = UIReturnKeyDefault;
 		textView.text = [self getText];
//		textView.autocapitalizationType = UITextAutocapitalizationTypeWords;
		[textView setTextColor:[UIColor blackColor]];
		textView.font = textFont;
		textView.delegate = self;
//		[textView setAutocorrectionType:UITextAutocorrectionTypeNo];
		//	[textField addTarget:self 
//				  action:@selector(textFieldDidEndEditing:) 
//		forControlEvents:UIControlEventEditingDidEndOnExit];     
		[textView setBackgroundColor:[UIColor colorWithRed:0.5 green:0.5 blue:0.0 alpha:0.1]];
		[view addSubview:textView];
		} else {
		textField = [[UITextField alloc] initWithFrame:rect];
		[textField setAutocorrectionType:UITextAutocorrectionTypeNo];
		textField.returnKeyType = UIReturnKeyDefault;
 		textField.text = [self getText];
//		textField.autocapitalizationType = UITextAutocapitalizationTypeWords;
		[textField setTextColor:[UIColor blackColor]];
		textField.font = textFont;
		textField.clearButtonMode = UITextFieldViewModeWhileEditing;
		textField.delegate = self;
		//	[textField addTarget:self 
		//				  action:@selector(textFieldDidEndEditing:) 
		//		forControlEvents:UIControlEventEditingDidEndOnExit];     
		[textField setBackgroundColor:[UIColor colorWithRed:0.5 green:0.5 blue:0.0 alpha:0.1]];
		[view addSubview:textField];
	}

}

-(void) dealloc
{
	if(textView != nil) [textView release];
	if(textField != nil) [textField release];
	[textFont release];
	[super dealloc];
}

@end
